// <auto-generated />
using System;
using Granary.Models.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Granary.Migrations
{
    [DbContext(typeof(GranaryContext))]
    [Migration("20250818201959_CementingNewSchema")]
    partial class CementingNewSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Granary.Models.DomainModels.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Tomatoes",
                            Description = "Includes all tomato varieties like Roma, Cherry, and Beefsteak."
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Mushrooms",
                            Description = "Covers common edible mushrooms such as White, Portobello, and Shiitake."
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Onions",
                            Description = "Includes Yellow, Red, Sweet, and specialty onions like Cippolini."
                        });
                });

            modelBuilder.Entity("Granary.Models.DomainModels.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("InvoiceId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            InvoiceId = 1,
                            DueDate = new DateTime(2024, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceDate = new DateTime(2024, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "INV-1001",
                            Status = "Pending",
                            SupplierId = 1
                        },
                        new
                        {
                            InvoiceId = 2,
                            DueDate = new DateTime(2025, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceDate = new DateTime(2024, 12, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "INV-1002",
                            Status = "Paid",
                            SupplierId = 2
                        },
                        new
                        {
                            InvoiceId = 3,
                            DueDate = new DateTime(2025, 2, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceDate = new DateTime(2025, 1, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "INV-1003",
                            Status = "Pending",
                            SupplierId = 3
                        },
                        new
                        {
                            InvoiceId = 4,
                            DueDate = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceDate = new DateTime(2025, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "INV-1004",
                            Status = "Overdue",
                            SupplierId = 4
                        },
                        new
                        {
                            InvoiceId = 5,
                            DueDate = new DateTime(2025, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceDate = new DateTime(2025, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InvoiceNumber = "INV-1005",
                            Status = "Paid",
                            SupplierId = 5
                        });
                });

            modelBuilder.Entity("Granary.Models.DomainModels.InvoiceProduct", b =>
                {
                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("UnitType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("InvoiceId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceProducts");

                    b.HasData(
                        new
                        {
                            InvoiceId = 1,
                            ProductId = 1,
                            Quantity = 25.00m,
                            UnitPrice = 2.99m,
                            UnitType = "Each"
                        },
                        new
                        {
                            InvoiceId = 1,
                            ProductId = 2,
                            Quantity = 15.00m,
                            UnitPrice = 1.49m,
                            UnitType = "Pound"
                        },
                        new
                        {
                            InvoiceId = 2,
                            ProductId = 3,
                            Quantity = 40.00m,
                            UnitPrice = 1.25m,
                            UnitType = "Each"
                        },
                        new
                        {
                            InvoiceId = 2,
                            ProductId = 4,
                            Quantity = 20.00m,
                            UnitPrice = 3.25m,
                            UnitType = "Pound"
                        },
                        new
                        {
                            InvoiceId = 3,
                            ProductId = 5,
                            Quantity = 10.00m,
                            UnitPrice = 1.99m,
                            UnitType = "Each"
                        },
                        new
                        {
                            InvoiceId = 3,
                            ProductId = 6,
                            Quantity = 12.00m,
                            UnitPrice = 0.75m,
                            UnitType = "Ounce"
                        },
                        new
                        {
                            InvoiceId = 4,
                            ProductId = 2,
                            Quantity = 18.00m,
                            UnitPrice = 1.49m,
                            UnitType = "Pound"
                        },
                        new
                        {
                            InvoiceId = 4,
                            ProductId = 3,
                            Quantity = 22.00m,
                            UnitPrice = 1.25m,
                            UnitType = "Each"
                        },
                        new
                        {
                            InvoiceId = 5,
                            ProductId = 7,
                            Quantity = 50.00m,
                            UnitPrice = 0.89m,
                            UnitType = "Pound"
                        },
                        new
                        {
                            InvoiceId = 5,
                            ProductId = 8,
                            Quantity = 30.00m,
                            UnitPrice = 1.10m,
                            UnitType = "Pound"
                        });
                });

            modelBuilder.Entity("Granary.Models.DomainModels.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("StockQuantity")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            Description = "Small sweet tomatoes",
                            ProductName = "Cherry Tomatoes",
                            StockQuantity = 100m,
                            SupplierId = 4
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            Description = "Ideal for sauces",
                            ProductName = "Roma Tomatoes",
                            StockQuantity = 200m,
                            SupplierId = 4
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1,
                            Description = "Large slicing tomato",
                            ProductName = "Beefsteak Tomatoes",
                            StockQuantity = 150m,
                            SupplierId = 4
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 2,
                            Description = "Mild and versatile",
                            ProductName = "White Mushrooms",
                            StockQuantity = 80m,
                            SupplierId = 3
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 2,
                            Description = "Meaty texture, great grilled",
                            ProductName = "Portobello Mushrooms",
                            StockQuantity = 60m,
                            SupplierId = 3
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 2,
                            Description = "Savory and rich flavor",
                            ProductName = "Shiitake Mushrooms",
                            StockQuantity = 300m,
                            SupplierId = 3
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 3,
                            Description = "Common all-purpose onion",
                            ProductName = "Yellow Onions",
                            StockQuantity = 500m,
                            SupplierId = 5
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 3,
                            Description = "Colorful and sharp",
                            ProductName = "Red Onions",
                            StockQuantity = 400m,
                            SupplierId = 5
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 3,
                            Description = "Mild and sweet",
                            ProductName = "Sweet Onions",
                            StockQuantity = 350m,
                            SupplierId = 5
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 3,
                            Description = "Small and sweet, ideal roasting",
                            ProductName = "Cippolini Onions",
                            StockQuantity = 250m,
                            SupplierId = 5
                        });
                });

            modelBuilder.Entity("Granary.Models.DomainModels.Recipe", b =>
                {
                    b.Property<int>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecipeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecipeId");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            RecipeId = 1,
                            Description = "A warm and savory soup made from fresh tomatoes and onions.",
                            RecipeName = "Tomato Soup"
                        },
                        new
                        {
                            RecipeId = 2,
                            Description = "Mushroom caps filled with a savory onion and herb blend.",
                            RecipeName = "Stuffed Mushrooms"
                        },
                        new
                        {
                            RecipeId = 3,
                            Description = "A classic Italian-style tomato and mushroom sauce.",
                            RecipeName = "Marinara Sauce"
                        },
                        new
                        {
                            RecipeId = 4,
                            Description = "A fresh salad combining red and yellow onions with cherry tomatoes.",
                            RecipeName = "Onion Salad"
                        });
                });

            modelBuilder.Entity("Granary.Models.DomainModels.RecipeProduct", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("RecipeId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("RecipeIngredients");

                    b.HasData(
                        new
                        {
                            RecipeId = 1,
                            ProductId = 1,
                            Quantity = 4.0m
                        },
                        new
                        {
                            RecipeId = 1,
                            ProductId = 7,
                            Quantity = 1.0m
                        },
                        new
                        {
                            RecipeId = 2,
                            ProductId = 4,
                            Quantity = 6.0m
                        },
                        new
                        {
                            RecipeId = 2,
                            ProductId = 8,
                            Quantity = 0.5m
                        },
                        new
                        {
                            RecipeId = 3,
                            ProductId = 2,
                            Quantity = 3.0m
                        },
                        new
                        {
                            RecipeId = 3,
                            ProductId = 5,
                            Quantity = 2.0m
                        },
                        new
                        {
                            RecipeId = 4,
                            ProductId = 7,
                            Quantity = 1.0m
                        },
                        new
                        {
                            RecipeId = 4,
                            ProductId = 8,
                            Quantity = 1.0m
                        },
                        new
                        {
                            RecipeId = 4,
                            ProductId = 1,
                            Quantity = 1.0m
                        });
                });

            modelBuilder.Entity("Granary.Models.DomainModels.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            SupplierId = 1,
                            ContactEmail = "lena@freshfarms.com",
                            ContactName = "Lena Ortiz",
                            ContactPhone = "555-101-0001",
                            SupplierName = "Fresh Farms Co."
                        },
                        new
                        {
                            SupplierId = 2,
                            ContactEmail = "marcus@harvestsupply.com",
                            ContactName = "Marcus Liu",
                            ContactPhone = "555-101-0002",
                            SupplierName = "Harvest Supply Ltd."
                        },
                        new
                        {
                            SupplierId = 3,
                            ContactEmail = "jill@mushroommasters.com",
                            ContactName = "Jill Tanaka",
                            ContactPhone = "555-101-0003",
                            SupplierName = "Mushroom Masters"
                        },
                        new
                        {
                            SupplierId = 4,
                            ContactEmail = "rick@tomatotown.com",
                            ContactName = "Rick Valenti",
                            ContactPhone = "555-101-0004",
                            SupplierName = "Tomato Town Inc."
                        },
                        new
                        {
                            SupplierId = 5,
                            ContactEmail = "nina@onionbros.com",
                            ContactName = "Nina Patel",
                            ContactPhone = "555-101-0005",
                            SupplierName = "Onion Bros."
                        });
                });

            modelBuilder.Entity("Granary.Models.DomainModels.Invoice", b =>
                {
                    b.HasOne("Granary.Models.DomainModels.Supplier", "Supplier")
                        .WithMany("Invoices")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Granary.Models.DomainModels.InvoiceProduct", b =>
                {
                    b.HasOne("Granary.Models.DomainModels.Invoice", "Invoice")
                        .WithMany("InvoiceProducts")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Granary.Models.DomainModels.Product", "Product")
                        .WithMany("InvoiceProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Granary.Models.DomainModels.Product", b =>
                {
                    b.HasOne("Granary.Models.DomainModels.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Granary.Models.DomainModels.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Granary.Models.DomainModels.RecipeProduct", b =>
                {
                    b.HasOne("Granary.Models.DomainModels.Product", "Product")
                        .WithMany("RecipeProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Granary.Models.DomainModels.Recipe", "Recipe")
                        .WithMany("RecipeProducts")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Granary.Models.DomainModels.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Granary.Models.DomainModels.Invoice", b =>
                {
                    b.Navigation("InvoiceProducts");
                });

            modelBuilder.Entity("Granary.Models.DomainModels.Product", b =>
                {
                    b.Navigation("InvoiceProducts");

                    b.Navigation("RecipeProducts");
                });

            modelBuilder.Entity("Granary.Models.DomainModels.Recipe", b =>
                {
                    b.Navigation("RecipeProducts");
                });

            modelBuilder.Entity("Granary.Models.DomainModels.Supplier", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
